From: =?utf-8?q?Florian_Qu=C3=A8ze?= <florian@queze.net>
Date: Fri, 12 May 2017 14:42:39 +0200
Subject: [PATCH 04/12] Bug 1353542 - massive script-generated patch
 converting Task.async and Task.spawn calls,
 and generators clearly identifiable as tasks, rs=Mossop.

---
 ipc/modules/enigmailprocess_unix.jsm | 15 +++++++--------
 ipc/modules/enigmailprocess_win.jsm  | 17 ++++++++---------
 2 files changed, 15 insertions(+), 17 deletions(-)

diff --git a/ipc/modules/enigmailprocess_unix.jsm b/ipc/modules/enigmailprocess_unix.jsm
index 7f8e2fc..3e25deb 100644
--- a/ipc/modules/enigmailprocess_unix.jsm
+++ b/ipc/modules/enigmailprocess_unix.jsm
@@ -27,7 +27,6 @@ var EXPORTED_SYMBOLS = ["SubprocessImpl"];
 Cu.import("resource://gre/modules/ctypes.jsm"); /* global ctypes: false */
 Cu.import("resource://gre/modules/osfile.jsm"); /* global ctypes: false */
 Cu.import("resource://gre/modules/Services.jsm"); /* global Services: false */
-Cu.import("resource://gre/modules/Task.jsm"); /* global Task: false */
 Cu.import("resource://enigmail/enigmailprocess_common.jsm"); /* global SubprocessConstants: false */
 
 Services.scriptloader.loadSubScript("resource://enigmail/enigmailprocess_shared.js", this);
@@ -143,13 +142,13 @@ var SubprocessUnix = {
       }
     },
 
-    isExecutableFile: Task.async(function* isExecutable(path) {
+    async isExecutableFile(path) {
       if (!OS.Path.split(path).absolute) {
         return false;
       }
 
       try {
-        let info = yield OS.File.stat(path);
+        let info = await OS.File.stat(path);
 
         // FIXME: We really want access(path, X_OK) here, but OS.File does not
         // support it.
@@ -158,7 +157,7 @@ var SubprocessUnix = {
       catch (e) {
         return false;
       }
-    }),
+    },
 
     /**
      * Searches for the given executable file in the system executable
@@ -176,10 +175,10 @@ var SubprocessUnix = {
      *        in the search.
      * @returns {Promise<string>}
      */
-    pathSearch: Task.async(function*(bin, environment) {
+    async pathSearch(bin, environment) {
       let split = OS.Path.split(bin);
       if (split.absolute) {
-        if (yield this.isExecutableFile(bin)) {
+        if (await this.isExecutableFile(bin)) {
           return bin;
         }
         let error = new Error(`File at path "${bin}" does not exist, or is not executable`);
@@ -195,14 +194,14 @@ var SubprocessUnix = {
       for (let dir of dirs) {
         let path = OS.Path.join(dir, bin);
 
-        if (yield this.isExecutableFile(path)) {
+        if (await this.isExecutableFile(path)) {
           return path;
         }
       }
       let error = new Error(`Executable not found: ${bin}`);
       error.errorCode = SubprocessConstants.ERROR_BAD_EXECUTABLE;
       throw error;
-    })
+    }
 };
 
 var SubprocessImpl = SubprocessUnix;
diff --git a/ipc/modules/enigmailprocess_win.jsm b/ipc/modules/enigmailprocess_win.jsm
index 292dadc..0d85c30 100644
--- a/ipc/modules/enigmailprocess_win.jsm
+++ b/ipc/modules/enigmailprocess_win.jsm
@@ -26,7 +26,6 @@ Cu.import("resource://gre/modules/AppConstants.jsm"); /* global AppConstants: fa
 Cu.import("resource://gre/modules/ctypes.jsm"); /* global ctypes: false */
 Cu.import("resource://gre/modules/osfile.jsm"); /* global OS: false */
 Cu.import("resource://gre/modules/Services.jsm"); /* global Services: false */
-Cu.import("resource://gre/modules/Task.jsm"); /* global Task: false */
 Cu.import("resource://gre/modules/XPCOMUtils.jsm"); /* global XPCOMUtils: false */
 Cu.import("resource://enigmail/enigmailprocess_common.jsm"); /* global SubprocessConstants: false */
 
@@ -104,19 +103,19 @@ var SubprocessWin = {
       }
     },
 
-    isExecutableFile: Task.async(function*(path) {
+    async isExecutableFile(path) {
       if (!OS.Path.split(path).absolute) {
         return false;
       }
 
       try {
-        let info = yield OS.File.stat(path);
+        let info = await OS.File.stat(path);
         return !(info.isDir || info.isSymlink);
       }
       catch (e) {
         return false;
       }
-    }),
+    },
 
     /**
      * Searches for the given executable file in the system executable
@@ -134,10 +133,10 @@ var SubprocessWin = {
      *        in the search.
      * @returns {Promise<string>}
      */
-    pathSearch: Task.async(function*(bin, environment) {
+    async pathSearch(bin, environment) {
       let split = OS.Path.split(bin);
       if (split.absolute) {
-        if (yield this.isExecutableFile(bin)) {
+        if (await this.isExecutableFile(bin)) {
           return bin;
         }
         let error = new Error(`File at path "${bin}" does not exist, or is not a normal file`);
@@ -157,14 +156,14 @@ var SubprocessWin = {
       for (let dir of dirs) {
         let path = OS.Path.join(dir, bin);
 
-        if (yield this.isExecutableFile(path)) {
+        if (await this.isExecutableFile(path)) {
           return path;
         }
 
         for (let ext of exts) {
           let file = path + ext;
 
-          if (yield this.isExecutableFile(file)) {
+          if (await this.isExecutableFile(file)) {
             return file;
           }
         }
@@ -172,7 +171,7 @@ var SubprocessWin = {
       let error = new Error(`Executable not found: ${bin}`);
       error.errorCode = SubprocessConstants.ERROR_BAD_EXECUTABLE;
       throw error;
-    })
+    }
 };
 
 var SubprocessImpl = SubprocessWin;
