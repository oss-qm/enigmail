From: Daniel Kahn Gillmor <dkg@fifthhorseman.net>
Date: Fri, 8 Nov 2019 20:14:46 -0500
Subject: python3 treats objects as Unicode by default,
 no need for explicit indicators

---
 util/Preprocessor.py | 19 +++++++++----------
 1 file changed, 9 insertions(+), 10 deletions(-)

diff --git a/util/Preprocessor.py b/util/Preprocessor.py
index 3b7822c..0f51362 100644
--- a/util/Preprocessor.py
+++ b/util/Preprocessor.py
@@ -75,7 +75,7 @@ class Preprocessor:
     self.out = sys.stdout
     self.setMarker('#')
     self.LE = '\n'
-    self.varsubst = re.compile('@(?P<VAR>\w+)@', re.U)
+    self.varsubst = re.compile('@(?P<VAR>\w+)@')
   
   def warnUnused(self, file):
     if self.actionLevel == 0:
@@ -99,9 +99,8 @@ class Preprocessor:
     self.marker = aMarker
     if aMarker:
       self.instruction = re.compile('{0}(?P<cmd>[a-z]+)(?:\s(?P<args>.*))?$'
-                                    .format(aMarker), 
-                                    re.U)
-      self.comment = re.compile(aMarker, re.U)
+                                    .format(aMarker))
+      self.comment = re.compile(aMarker)
     else:
       class NoMatch(object):
         def match(self, *args):
@@ -247,7 +246,7 @@ class Preprocessor:
   
   # Variables
   def do_define(self, args):
-    m = re.match('(?P<name>\w+)(?:\s(?P<value>.*))?', args, re.U)
+    m = re.match('(?P<name>\w+)(?:\s(?P<value>.*))?', args)
     if not m:
       raise Preprocessor.Error(self, 'SYNTAX_DEF', args)
     val = 1
@@ -259,7 +258,7 @@ class Preprocessor:
         pass
     self.context[m.group('name')] = val
   def do_undef(self, args):
-    m = re.match('(?P<name>\w+)$', args, re.U)
+    m = re.match('(?P<name>\w+)$', args)
     if not m:
       raise Preprocessor.Error(self, 'SYNTAX_DEF', args)
     if args in self.context:
@@ -295,7 +294,7 @@ class Preprocessor:
     if self.disableLevel and not replace:
       self.disableLevel += 1
       return
-    if re.match('\W', args, re.U):
+    if re.match('\W', args):
       raise Preprocessor.Error(self, 'INVALID_VAR', args)
     if args not in self.context:
       self.disableLevel = 1
@@ -310,7 +309,7 @@ class Preprocessor:
     if self.disableLevel and not replace:
       self.disableLevel += 1
       return
-    if re.match('\W', args, re.U):
+    if re.match('\W', args):
       raise Preprocessor.Error(self, 'INVALID_VAR', args)
     if args in self.context:
       self.disableLevel = 1
@@ -354,7 +353,7 @@ class Preprocessor:
       self.ifStates.pop()
   # output processing
   def do_expand(self, args):
-    lst = re.split('__(\w+)__', args, re.U)
+    lst = re.split('__(\w+)__', args)
     do_replace = False
     def vsubst(v):
       if v in self.context:
@@ -439,7 +438,7 @@ class Preprocessor:
           args = self.applyFilters(args)
         if not os.path.isabs(args):
           args = os.path.join(self.context['DIRECTORY'], args)
-        args = open(args, 'rU')
+        args = open(args, 'r')
       except Preprocessor.Error:
         raise
       except:
