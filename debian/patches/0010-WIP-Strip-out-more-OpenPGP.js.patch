From: Daniel Kahn Gillmor <dkg@fifthhorseman.net>
Date: Tue, 5 Nov 2019 19:48:19 -0500
Subject: Strip out more OpenPGP.js

GnuPG should not depend on OpenPGP.js.

This is an attempt to strip out whatever dependency it had and make it
work with gpg alone.

There is no need for getStrippedKey at all -- it's never invoked in
the codebase outside of getMinimalPubKey, and it should not be
relevant there, since we are already filtering appropriately.

Since we explicitly depend on gnupg 2.2.8-2 or greater, we are fine
with these expectations.
---
 package/cryptoAPI/Makefile      |   1 -
 package/cryptoAPI/README.txt    |   8 +-
 package/cryptoAPI/gnupg.js      |  67 +++------------
 package/cryptoAPI/openpgp-js.js | 183 ----------------------------------------
 package/tests/openpgpjs-test.js |  77 -----------------
 5 files changed, 16 insertions(+), 320 deletions(-)
 delete mode 100644 package/cryptoAPI/openpgp-js.js
 delete mode 100644 package/tests/openpgpjs-test.js

diff --git a/package/cryptoAPI/Makefile b/package/cryptoAPI/Makefile
index 7e8cfd2..12c2e6a 100644
--- a/package/cryptoAPI/Makefile
+++ b/package/cryptoAPI/Makefile
@@ -14,7 +14,6 @@ MODFILES = \
 	gnupg-decryption.jsm \
 	gnupg-keylist.jsm \
 	gnupg-key.jsm \
-	openpgp-js.js \
 	interface.js
 
 GENFILES = $(addprefix $(GENDIR)/,$(MODFILES))
diff --git a/package/cryptoAPI/README.txt b/package/cryptoAPI/README.txt
index 7bf86ef..003ee3b 100644
--- a/package/cryptoAPI/README.txt
+++ b/package/cryptoAPI/README.txt
@@ -17,8 +17,8 @@ Class Hierarchy
 CryptoAPI (interface.js)
  |
  |----- OpenPGPjsCryptoAPI (openpgp-js.js)
- |  |
- |  |-- GnuPGCryptoAPI (gnupg.js)
+ |
+ |----- GnuPGCryptoAPI (gnupg.js)
  |
  |----- [SequoiaCryptoAPI (tbd)]
 
@@ -27,8 +27,8 @@ CryptoAPI is the generic API that does not contain any functionality, except
 for sync().
 
 - OpenPGPjsCryptoAPI holds the implementation for OpenPGP.js (https://openpgpjs.org/).
-- GnuPGCryptoAPI holds the implementation for GnuPG (https://gnupg.org/). Some of its functionality
-  bases on OpenPGP.js.
+  (OpenPGP.js is not shipped by Debian, see https://bugs.debian.org/787774)
+- GnuPGCryptoAPI holds the implementation for GnuPG (https://gnupg.org/).
 - SequoiaCryptoAPI will maybe hold in the future the implementation for Sequoia (https://sequoia-pgp.org/).
 
 
diff --git a/package/cryptoAPI/gnupg.js b/package/cryptoAPI/gnupg.js
index 3f48354..93d712a 100644
--- a/package/cryptoAPI/gnupg.js
+++ b/package/cryptoAPI/gnupg.js
@@ -11,13 +11,11 @@ var EXPORTED_SYMBOLS = ["getGnuPGAPI"];
 
 var Services = Components.utils.import("resource://gre/modules/Services.jsm").Services;
 
-// Load OpenPGP.js (including generic) API
-Services.scriptloader.loadSubScript("chrome://enigmail/content/modules/cryptoAPI/openpgp-js.js",
-  null, "UTF-8"); /* global OpenPGPjsCryptoAPI: false */
-
-/* Globals loaded from openpgp-js.js: */
-/* global getOpenPGP: false, EnigmailLog: false */
+// Load generic API
+Services.scriptloader.loadSubScript("chrome://enigmail/content/modules/cryptoAPI/interface.js",
+  null, "UTF-8"); /* global CryptoAPI */
 
+const EnigmailLog = ChromeUtils.import("chrome://enigmail/content/modules/log.jsm").EnigmailLog;
 const EnigmailGpg = ChromeUtils.import("chrome://enigmail/content/modules/gpg.jsm").EnigmailGpg;
 const EnigmailExecution = ChromeUtils.import("chrome://enigmail/content/modules/execution.jsm").EnigmailExecution;
 const EnigmailFiles = ChromeUtils.import("chrome://enigmail/content/modules/files.jsm").EnigmailFiles;
@@ -46,7 +44,7 @@ const {
  * GnuPG implementation of CryptoAPI
  */
 
-class GnuPGCryptoAPI extends OpenPGPjsCryptoAPI {
+class GnuPGCryptoAPI extends CryptoAPI {
   constructor() {
     super();
     this.api_name = "GnuPG";
@@ -172,46 +170,14 @@ class GnuPGCryptoAPI extends OpenPGPjsCryptoAPI {
     const statusObj = {};
     const exitCodeObj = {};
     let res = await EnigmailExecution.execAsync(EnigmailGpg.agentPath, args);
-    let exportOK = true;
     let keyBlock = res.stdoutData;
 
-    if (EnigmailGpg.getGpgFeature("export-result")) {
-      // GnuPG 2.1.10+
-      let r = new RegExp("^\\[GNUPG:\\] EXPORTED " + fpr, "m");
-      if (res.stderrData.search(r) < 0) {
-        retObj.exitCode = 2;
-        retObj.errorMsg = EnigmailLocale.getString("failKeyExtract");
-        exportOK = false;
-      }
-    } else {
-      // GnuPG older than 2.1.10
-      if (keyBlock.length < 50) {
-        retObj.exitCode = 2;
-        retObj.errorMsg = EnigmailLocale.getString("failKeyExtract");
-        exportOK = false;
-      }
+    let r = new RegExp("^\\[GNUPG:\\] EXPORTED " + fpr, "m");
+    if (res.stderrData.search(r) < 0) {
+      retObj.exitCode = 2;
+      retObj.errorMsg = EnigmailLocale.getString("failKeyExtract");
     }
-
-    if (EnigmailGpg.getGpgFeature("export-specific-uid")) {
-      // GnuPG 2.2.9+
-      retObj.keyData = btoa(keyBlock);
-      return retObj;
-    }
-
-    // GnuPG < 2.2.9
-    if (exportOK) {
-      let minKey = await this.getStrippedKey(keyBlock, email);
-      if (minKey) {
-        minimalKeyBlock = btoa(String.fromCharCode.apply(null, minKey));
-      }
-
-      if (!minimalKeyBlock) {
-        retObj.exitCode = 1;
-        retObj.errorMsg = EnigmailLocale.getString("failKeyNoSubkey");
-      }
-    }
-
-    retObj.keyData = minimalKeyBlock;
+    retObj.keyData = btoa(keyBlock);
     return retObj;
   }
 
@@ -431,20 +397,11 @@ class GnuPGCryptoAPI extends OpenPGPjsCryptoAPI {
   }
 
   async getKeyListFromKeyBlock(keyBlockStr) {
-
-    let res;
-    try {
-      res = await getGpgKeyData(keyBlockStr);
-    } catch (ex) {
-      if (ex === "unsupported") {
-        res = await this.OPENPGPjs_getKeyListFromKeyBlock(keyBlockStr);
-      } else throw ex;
-    }
-    return res;
+    return getGpgKeyData(keyBlockStr);
   }
 
 }
 
 function getGnuPGAPI() {
   return new GnuPGCryptoAPI();
-}
\ No newline at end of file
+}
diff --git a/package/cryptoAPI/openpgp-js.js b/package/cryptoAPI/openpgp-js.js
deleted file mode 100644
index 0203b5d..0000000
--- a/package/cryptoAPI/openpgp-js.js
+++ /dev/null
@@ -1,183 +0,0 @@
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-
-"use strict";
-
-//var EXPORTED_SYMBOLS = ["getOpenPGPjsAPI"];
-
-
-var Services = ChromeUtils.import("resource://gre/modules/Services.jsm").Services;
-const EnigmailLog = Cu.import("chrome://enigmail/content/modules/log.jsm").EnigmailLog;
-const EnigmailLazy = Cu.import("chrome://enigmail/content/modules/lazy.jsm").EnigmailLazy;
-
-const getOpenPGP = EnigmailLazy.loader("enigmail/openpgp.jsm", "EnigmailOpenPGP");
-const getArmor = EnigmailLazy.loader("enigmail/armor.jsm", "EnigmailArmor");
-
-// Load generic API
-Services.scriptloader.loadSubScript("chrome://enigmail/content/modules/cryptoAPI/interface.js",
-  null, "UTF-8"); /* global CryptoAPI */
-
-
-/**
- * OpenPGP.js implementation of CryptoAPI
- */
-
-class OpenPGPjsCryptoAPI extends CryptoAPI {
-  constructor() {
-    super();
-    this.api_name = "OpenPGP.js";
-  }
-
-  async getStrippedKey(armoredKey, emailAddr) {
-    EnigmailLog.DEBUG("openpgp-js.js: getStrippedKey()\n");
-
-    let searchUid = undefined;
-    if (emailAddr) {
-      if (emailAddr.search(/^<.{1,500}>$/) < 0) {
-        searchUid = `<${emailAddr}>`;
-      } else searchUid = emailAddr;
-    }
-
-    try {
-      const openpgp = getOpenPGP().openpgp;
-      let msg = await openpgp.key.readArmored(armoredKey);
-
-      if (!msg || msg.keys.length === 0) {
-        if (msg.err) {
-          EnigmailLog.writeException("openpgp-js.js", msg.err[0]);
-        }
-        return null;
-      }
-
-      let key = msg.keys[0];
-      let uid = await key.getPrimaryUser(null, searchUid);
-      if (!uid || !uid.user) return null;
-
-      let signSubkey = await key.getSigningKey();
-      let encSubkey = await key.getEncryptionKey();
-      /*
-            let encSubkey = null,
-              signSubkey = null;
-
-            for (let i = 0; i < key.subKeys.length; i++) {
-              if (key.subKeys[i].subKey === encSubkeyPacket) {
-                encSubkey = key.subKeys[i];
-                break;
-              }
-            }
-            if (!encSubkey) return null;
-
-            if (!signSubkeyPacket.keyid) {
-              for (let i = 0; i < key.subKeys.length; i++) {
-                if (key.subKeys[i].subKey === signSubkeyPacket) {
-                  signSubkey = key.subKeys[i];
-                  break;
-                }
-              }
-              if (!signSubkey) return null;
-            }
-      */
-
-      let p = new openpgp.packet.List();
-      p.push(key.primaryKey);
-      p.concat(uid.user.toPacketlist());
-      if (key !== signSubkey) {
-        p.concat(signSubkey.toPacketlist());
-      }
-      if (key !== encSubkey) {
-        p.concat(encSubkey.toPacketlist());
-      }
-
-      return p.write();
-    } catch (ex) {
-      EnigmailLog.DEBUG("openpgp-js.js: getStrippedKey: ERROR " + ex.message + "\n" + ex.stack + "\n");
-    }
-    return null;
-  }
-
-  async getKeyListFromKeyBlock(keyBlockStr) {
-    return await this.OPENPGPjs_getKeyListFromKeyBlockkeyBlockStr(keyBlockStr);
-  }
-
-  async OPENPGPjs_getKeyListFromKeyBlock(keyBlockStr) {
-    EnigmailLog.DEBUG("openpgp-js.js: getKeyListFromKeyBlock()\n");
-    const EnigmailTime = ChromeUtils.import("chrome://enigmail/content/modules/time.jsm").EnigmailTime;
-
-    const SIG_TYPE_REVOCATION = 0x20;
-
-    let keyList = [];
-    let key = {};
-    let blocks;
-    let isBinary = false;
-    const EOpenpgp = getOpenPGP();
-
-    if (keyBlockStr.search(/-----BEGIN PGP (PUBLIC|PRIVATE) KEY BLOCK-----/) >= 0) {
-      blocks = getArmor().splitArmoredBlocks(keyBlockStr);
-    } else {
-      isBinary = true;
-      blocks = [EOpenpgp.enigmailFuncs.bytesToArmor(EOpenpgp.openpgp.enums.armor.public_key, keyBlockStr)];
-    }
-
-    for (let b of blocks) {
-      let m = await EOpenpgp.openpgp.message.readArmored(b);
-
-      for (let i = 0; i < m.packets.length; i++) {
-        let packetType = EOpenpgp.openpgp.enums.read(EOpenpgp.openpgp.enums.packet, m.packets[i].tag);
-        switch (packetType) {
-          case "publicKey":
-          case "secretKey":
-            key = {
-              id: m.packets[i].getKeyId().toHex().toUpperCase(),
-              fpr: m.packets[i].getFingerprint().toUpperCase(),
-              uids: [],
-              created: EnigmailTime.getDateTime(m.packets[i].getCreationTime().getTime()/1000, true, false),
-              name: null,
-              isSecret: false,
-              revoke: false
-            };
-
-            if (!(key.id in keyList)) {
-              keyList[key.id] = key;
-            }
-
-            if (packetType === "secretKey") {
-              keyList[key.id].isSecret = true;
-            }
-            break;
-          case "userid":
-            if (!key.name) {
-              key.name = m.packets[i].userid.replace(/[\r\n]+/g, " ");
-            }
-            else {
-              key.uids.push(m.packets[i].userid.replace(/[\r\n]+/g, " "));
-            }
-            break;
-          case "signature":
-            if (m.packets[i].signatureType === SIG_TYPE_REVOCATION) {
-              let keyId = m.packets[i].issuerKeyId.toHex().toUpperCase();
-              if (keyId in keyList) {
-                keyList[keyId].revoke = true;
-              } else {
-                keyList[keyId] = {
-                  revoke: true,
-                  id: keyId
-                };
-              }
-            }
-            break;
-        }
-      }
-    }
-
-    return keyList;
-  }
-}
-
-
-function getOpenPGPjsAPI() {
-  return new OpenPGPjsCryptoAPI();
-}
\ No newline at end of file
diff --git a/package/tests/openpgpjs-test.js b/package/tests/openpgpjs-test.js
deleted file mode 100644
index ff71bb3..0000000
--- a/package/tests/openpgpjs-test.js
+++ /dev/null
@@ -1,77 +0,0 @@
-/*global do_load_module: false, do_get_file: false, do_get_cwd: false, testing: false, test: false, Assert: false, resetting: false */
-/*global do_test_pending: false, do_test_finished: false */
-
-/*
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/.
- */
-
-"use strict";
-
-do_load_module("file://" + do_get_cwd().path + "/testHelper.js");
-
-testing("cryptoAPI/openpgp-js.js"); /*global getOpenPGPjsAPI: false */
-
-test(function testGetStrippedKey() {
-  const cApi = getOpenPGPjsAPI();
-
-  const pubKey = "-----BEGIN PGP PUBLIC KEY BLOCK-----" +
-    "\n" +
-    "\n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" +
-    "\nsnHSt1DRJA==" +
-    "\n=I9l9" +
-    "\n-----END PGP PUBLIC KEY BLOCK-----";
-
-  let minKey = cApi.sync(cApi.getStrippedKey(pubKey));
-  let got = btoa(String.fromCharCode.apply(null, minKey));
-  Assert.equal(got.substr(0, 127), "xsFNBFVHm5sBEACs94Ln+RMdeyBpWQtTZ/NZnwntsB10Wd3HTgo5sdA/OOFOJrWetJfAZ/HRxiSu1bwRaFVC8p061ftTbxf8bsdfsykYJQQqPODfcO0/oY2n/Z93ya8");
-  Assert.equal(got.substr(-127), "QriSRXV4ZhMhGtnhHEYqHP982gBxk4RPvEp7APCLrqgC0+N8N29eC4s3JkVkHAZx+fj5YV2H9/5wJRJ1w+kwmazhpTQsy01kEwS4NZMPe8Uvz0MgoNuF7Jx0rdQ0SQ=");
-  Assert.equal(got.length, 3080);
-});
\ No newline at end of file
